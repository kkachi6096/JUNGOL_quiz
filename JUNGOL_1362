#include <stdio.h>
#include <string.h>
#include <malloc.h>
#define MAX 256

typedef struct nodetype *node_pointer;
typedef struct nodetype{
	char symbol;
	node_pointer left;
	node_pointer right;
}nodetype;

typedef struct Symbol{
	char symbol;
	char code[MAX];
	int len;
}Symbol;

node_pointer create_NULL_node(){
	node_pointer node = (node_pointer)malloc(sizeof(nodetype));
	node->symbol = '0';
	node->left = node->right = NULL;
	return node;
}

void huffman(node_pointer h, Symbol input);
void decode(char str[], node_pointer h);

int main(void){
	char str[MAX];
	int n, i;
	node_pointer h = NULL;
	scanf("%s", str);
	
	scanf("%d", &n);
	
	Symbol input[n];
	
	h = create_NULL_node();
	
	for(i=0; i<n; i++){
		scanf("%s", input[i].code);
		input[i].symbol = 'A' + i;
		input[i].len = strlen(input[i].code);
		huffman(h, input[i]);
	}
	
	decode(str, h);
}

void huffman(node_pointer h, Symbol input){
	int i;
	node_pointer p = h;
	node_pointer node = NULL;
	
	for(i = 0; i<input.len; i++){
	//	printf("%c %d\n", input.code[i], input.len);
		
		node = create_NULL_node();
		if(input.code[i] == '0'){
			if(p->left == NULL) {
				p->left = node;
			}
			p = p->left;
			if(i == input.len - 1){
				p->symbol = input.symbol;
			//	printf("%c\n",p->symbol);
				break;
			}
		}
		else if(input.code[i] == '1'){
			if(p->right == NULL){
				p->right = node;
			}
			p = p->right;
			if(i == input.len - 1){
				p->symbol = input.symbol;
			//	printf("%c\n",p->symbol);
				break;
			}
		}
		node = NULL;
	}
}

void decode(char str[], node_pointer h){
	int i;
	node_pointer p = h;
	//printf("%s\n", str);
//	printf("%d\n", strlen(str));
	
	for(i=0; i<strlen(str); i++){
		
		if(str[i] == '0'){
			//printf("left ");
			p = p->left;
			if(p->right == NULL && p->left == NULL){
				printf("%c", p->symbol);
				p = h;
			}
		}
		else if(str[i] == '1'){
			//printf("right ");
			p = p->right;
			if(p->right == NULL && p->left == NULL){
				printf("%c", p->symbol);
				p = h;
			}
		}
	}
}
